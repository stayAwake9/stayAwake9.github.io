<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试题合集-VUE</title>
      <link href="/2023/01/27/mian-shi-ti-he-ji-vue/"/>
      <url>/2023/01/27/mian-shi-ti-he-ji-vue/</url>
      
        <content type="html"><![CDATA[<h1 id="VUE2面试题系类"><a href="#VUE2面试题系类" class="headerlink" title="VUE2面试题系类"></a>VUE2面试题系类</h1><h2 id="1、v-show与v-if有什么区别？"><a href="#1、v-show与v-if有什么区别？" class="headerlink" title="1、v-show与v-if有什么区别？"></a>1、v-show与v-if有什么区别？</h2><h3 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h3><h5 id="v-show和v-if都是控制dom元素的显示和隐藏。"><a href="#v-show和v-if都是控制dom元素的显示和隐藏。" class="headerlink" title="v-show和v-if都是控制dom元素的显示和隐藏。"></a>v-show和v-if都是控制dom元素的显示和隐藏。</h5><h3 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h3><h5 id="1、原理："><a href="#1、原理：" class="headerlink" title="1、原理："></a>1、原理：</h5><h5 id="v-show时通过控制元素的样式属性display的值，来完成显示和隐藏；"><a href="#v-show时通过控制元素的样式属性display的值，来完成显示和隐藏；" class="headerlink" title="v-show时通过控制元素的样式属性display的值，来完成显示和隐藏；"></a>v-show时通过控制元素的样式属性display的值，来完成显示和隐藏；</h5><h5 id="v-if是通过对dom元素的添加和删除来完成显示和隐藏"><a href="#v-if是通过对dom元素的添加和删除来完成显示和隐藏" class="headerlink" title="v-if是通过对dom元素的添加和删除来完成显示和隐藏"></a>v-if是通过对dom元素的添加和删除来完成显示和隐藏</h5><h5 id="2、使用场景：由原理（做法）得出使用场景的区别"><a href="#2、使用场景：由原理（做法）得出使用场景的区别" class="headerlink" title="2、使用场景：由原理（做法）得出使用场景的区别"></a>2、使用场景：由原理（做法）得出使用场景的区别</h5><h5 id="v-show：使用在dom元素频繁切换的场景"><a href="#v-show：使用在dom元素频繁切换的场景" class="headerlink" title="v-show：使用在dom元素频繁切换的场景"></a>v-show：使用在dom元素频繁切换的场景</h5><h5 id="v-if：当dom元素的切换不频繁，可以使用。特别是，首次元素处于隐藏的情况下"><a href="#v-if：当dom元素的切换不频繁，可以使用。特别是，首次元素处于隐藏的情况下" class="headerlink" title="v-if：当dom元素的切换不频繁，可以使用。特别是，首次元素处于隐藏的情况下"></a>v-if：当dom元素的切换不频繁，可以使用。特别是，首次元素处于隐藏的情况下</h5><hr><h2 id="2、说说对SPA单页面的理解，他的优缺点分别是什么？"><a href="#2、说说对SPA单页面的理解，他的优缺点分别是什么？" class="headerlink" title="2、说说对SPA单页面的理解，他的优缺点分别是什么？"></a>2、说说对SPA单页面的理解，他的优缺点分别是什么？</h2><h3 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h3><p>SPA的英文是 single-page application，也就是说整个项目中只有一个页面。</p><p>单页面应用的实现思路： 就是Web页面初始化时加载所有的HTML、JavaScript和 CSS，内容的变化，靠动态操作DOM。</p><h3 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><h6 id="1）：局部刷新。—用户体验好、快，内容的改变不需要重新加载整个页面。"><a href="#1）：局部刷新。—用户体验好、快，内容的改变不需要重新加载整个页面。" class="headerlink" title="1）：局部刷新。—用户体验好、快，内容的改变不需要重新加载整个页面。"></a>1）：局部刷新。—用户体验好、快，内容的改变不需要重新加载整个页面。</h6><h6 id="2）：服务器的压力小。-—-基于上面一点，SPA对服务器压力小；"><a href="#2）：服务器的压力小。-—-基于上面一点，SPA对服务器压力小；" class="headerlink" title="2）：服务器的压力小。  — 基于上面一点，SPA对服务器压力小；"></a>2）：服务器的压力小。  — 基于上面一点，SPA对服务器压力小；</h6><h6 id="3）：前后端职责分离。-—-架构清晰，前端进行交互逻辑，后端负责数据处理；"><a href="#3）：前后端职责分离。-—-架构清晰，前端进行交互逻辑，后端负责数据处理；" class="headerlink" title="3）：前后端职责分离。 — 架构清晰，前端进行交互逻辑，后端负责数据处理；"></a>3）：前后端职责分离。 — 架构清晰，前端进行交互逻辑，后端负责数据处理；</h6><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><h6 id="1）：初次加载耗时多。—-为实现单页面Web应用功能及显示效果，需要在加载页面的时候将，JavaScript、CSS统一加载，部分页面按需加载；"><a href="#1）：初次加载耗时多。—-为实现单页面Web应用功能及显示效果，需要在加载页面的时候将，JavaScript、CSS统一加载，部分页面按需加载；" class="headerlink" title="1）：初次加载耗时多。— 为实现单页面Web应用功能及显示效果，需要在加载页面的时候将，JavaScript、CSS统一加载，部分页面按需加载；"></a>1）：初次加载耗时多。— 为实现单页面Web应用功能及显示效果，需要在加载页面的时候将，JavaScript、CSS统一加载，部分页面按需加载；</h6><h6 id="2）：前进后退路由管理问题。-—-由于单页面应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退的功能，所有的页面切换需要自己搭建堆栈管理（vue-router完成）"><a href="#2）：前进后退路由管理问题。-—-由于单页面应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退的功能，所有的页面切换需要自己搭建堆栈管理（vue-router完成）" class="headerlink" title="2）：前进后退路由管理问题。 — 由于单页面应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退的功能，所有的页面切换需要自己搭建堆栈管理（vue-router完成）"></a>2）：前进后退路由管理问题。 — 由于单页面应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退的功能，所有的页面切换需要自己搭建堆栈管理（vue-router完成）</h6><h6 id="3）：SEO难度较大。—-由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势。"><a href="#3）：SEO难度较大。—-由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势。" class="headerlink" title="3）：SEO难度较大。— 由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势。"></a>3）：SEO难度较大。— 由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势。</h6><hr><h2 id="3、怎么理解Vue的单向数据流"><a href="#3、怎么理解Vue的单向数据流" class="headerlink" title="3、怎么理解Vue的单向数据流"></a>3、怎么理解Vue的单向数据流</h2><h4 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h4><h5 id="单项数据流是发生在-父组件向子组件传值的时候-，所有的prop使得起父子prop之间形成了也该单向下行绑定。"><a href="#单项数据流是发生在-父组件向子组件传值的时候-，所有的prop使得起父子prop之间形成了也该单向下行绑定。" class="headerlink" title="单项数据流是发生在   父组件向子组件传值的时候  ，所有的prop使得起父子prop之间形成了也该单向下行绑定。"></a>单项数据流是发生在   <em><strong>父组件向子组件传值的时候</strong></em>  ，所有的prop使得起父子prop之间形成了也该单向下行绑定。</h5><h5 id="也就是说：父级prop的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态。"><a href="#也就是说：父级prop的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态。" class="headerlink" title="也就是说：父级prop的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态。"></a>也就是说：父级prop的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态。</h5><h4 id="而且"><a href="#而且" class="headerlink" title="而且"></a>而且</h4><h5 id="每次父组件发生更新时，子组件中所有的prop都会刷新为最新的值。所以，在一个子组件内部改变prop，Vue会在浏览器的控制台发出警告。"><a href="#每次父组件发生更新时，子组件中所有的prop都会刷新为最新的值。所以，在一个子组件内部改变prop，Vue会在浏览器的控制台发出警告。" class="headerlink" title="每次父组件发生更新时，子组件中所有的prop都会刷新为最新的值。所以，在一个子组件内部改变prop，Vue会在浏览器的控制台发出警告。"></a>每次父组件发生更新时，子组件中所有的prop都会刷新为最新的值。所以，在一个子组件内部改变prop，Vue会在浏览器的控制台发出警告。</h5><hr><h2 id="4、computed和watch的区别和运用的场景？"><a href="#4、computed和watch的区别和运用的场景？" class="headerlink" title="4、computed和watch的区别和运用的场景？"></a>4、computed和watch的区别和运用的场景？</h2><h3 id="首先（相同点）："><a href="#首先（相同点）：" class="headerlink" title="首先（相同点）："></a>首先（相同点）：</h3><h6 id="computed-和-watch都可以实现数据的监听。"><a href="#computed-和-watch都可以实现数据的监听。" class="headerlink" title="computed 和 watch都可以实现数据的监听。"></a>computed 和 watch都可以实现数据的监听。</h6><h3 id="其次（区别）："><a href="#其次（区别）：" class="headerlink" title="其次（区别）："></a>其次（区别）：</h3><h5 id="第一（本质）："><a href="#第一（本质）：" class="headerlink" title="第一（本质）："></a>第一（本质）：</h5><p><strong>computed：是计算属性</strong>，依赖其他属性值，并且computed的值<strong>有缓存</strong>，当依赖的属性值发生改变时，才会重新计算computed的值，它可以设置getter和setter。</p><p><strong>watch：</strong>更多的是<strong>观察</strong>的作用，每当监听的数据变化都会执行回调进行后续操作，他只能设置getter.</p><h5 id="第二（运用场景）："><a href="#第二（运用场景）：" class="headerlink" title="第二（运用场景）："></a>第二（运用场景）：</h5><p><strong>computed：</strong>当我们需要进行数值计算，并且依赖于其他数据时，使用computed。</p><p><strong>watch：</strong>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用watch。</p><hr><h2 id="5、直接用下标（索引）给一个数组项赋值，Vue能检测到变化吗？"><a href="#5、直接用下标（索引）给一个数组项赋值，Vue能检测到变化吗？" class="headerlink" title="5、直接用下标（索引）给一个数组项赋值，Vue能检测到变化吗？"></a>5、直接用下标（索引）给一个数组项赋值，Vue能检测到变化吗？</h2><h3 id="不能。"><a href="#不能。" class="headerlink" title="不能。"></a>不能。</h3><h5 id="因为，vue在做数据劫持时，只对数组做了劫持，没有对数组的每一项进行劫持。所以用下标的方式修改数组时，vue不能检测到数据的变化。"><a href="#因为，vue在做数据劫持时，只对数组做了劫持，没有对数组的每一项进行劫持。所以用下标的方式修改数组时，vue不能检测到数据的变化。" class="headerlink" title="因为，vue在做数据劫持时，只对数组做了劫持，没有对数组的每一项进行劫持。所以用下标的方式修改数组时，vue不能检测到数据的变化。"></a>因为，vue在做数据劫持时，只对数组做了劫持，没有对数组的每一项进行劫持。所以用下标的方式修改数组时，vue不能检测到数据的变化。</h5><h5 id="为了解决他们，Vue也提供了操作方法：Vue-set"><a href="#为了解决他们，Vue也提供了操作方法：Vue-set" class="headerlink" title="为了解决他们，Vue也提供了操作方法：Vue.set"></a>为了解决他们，Vue也提供了操作方法：Vue.set</h5><h5 id="Vue-set（数组名，下标，新值）"><a href="#Vue-set（数组名，下标，新值）" class="headerlink" title="Vue.set（数组名，下标，新值）"></a>Vue.set（数组名，下标，新值）</h5><hr><h1 id="6、谈谈对Vue生命周期的理解？"><a href="#6、谈谈对Vue生命周期的理解？" class="headerlink" title="6、谈谈对Vue生命周期的理解？"></a>6、谈谈对Vue生命周期的理解？</h1><h3 id="1）、生命周期是什么？"><a href="#1）、生命周期是什么？" class="headerlink" title="1）、生命周期是什么？"></a>1）、生命周期是什么？</h3><h6 id="Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载DOM–-gt-渲染、更新—-gt-渲染、卸载等一系列过程，我们称这是Vue生命周期。"><a href="#Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载DOM–-gt-渲染、更新—-gt-渲染、卸载等一系列过程，我们称这是Vue生命周期。" class="headerlink" title="Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载DOM–>渲染、更新—>渲染、卸载等一系列过程，我们称这是Vue生命周期。"></a>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载DOM–&gt;渲染、更新—&gt;渲染、卸载等一系列过程，我们称这是Vue生命周期。</h6><h3 id="2）、各个生命周期阶段及其钩子函数"><a href="#2）、各个生命周期阶段及其钩子函数" class="headerlink" title="2）、各个生命周期阶段及其钩子函数"></a>2）、各个生命周期阶段及其钩子函数</h3><h5 id="Vue的生命周期核心经历了四个阶段，在四个阶段的前后分别由两个钩子函数。"><a href="#Vue的生命周期核心经历了四个阶段，在四个阶段的前后分别由两个钩子函数。" class="headerlink" title="Vue的生命周期核心经历了四个阶段，在四个阶段的前后分别由两个钩子函数。"></a>Vue的生命周期核心经历了四个阶段，在四个阶段的前后分别由两个钩子函数。</h5><h6 id="第一阶段：-数据挂载阶段：把配置项data中的属性，赋给了vue对象本身，并且做了数据劫持。"><a href="#第一阶段：-数据挂载阶段：把配置项data中的属性，赋给了vue对象本身，并且做了数据劫持。" class="headerlink" title="第一阶段： 数据挂载阶段：把配置项data中的属性，赋给了vue对象本身，并且做了数据劫持。"></a>第一阶段： 数据挂载阶段：把配置项data中的属性，赋给了vue对象本身，并且做了数据劫持。</h6><p>该阶段前后的两个钩子函数： beforeCreate 和  created</p><h6 id="第二阶段：模板渲染阶段：把vue对象的数据渲染到模板上。"><a href="#第二阶段：模板渲染阶段：把vue对象的数据渲染到模板上。" class="headerlink" title="第二阶段：模板渲染阶段：把vue对象的数据渲染到模板上。"></a>第二阶段：模板渲染阶段：把vue对象的数据渲染到模板上。</h6><p>该阶段前后的两个钩子函数：beforeMount 和  mounted</p><h6 id="第三阶段：组件更新阶段：当数据发送变化时，组件会进行重新渲染，所以，准确的说是，组件重新渲染阶段"><a href="#第三阶段：组件更新阶段：当数据发送变化时，组件会进行重新渲染，所以，准确的说是，组件重新渲染阶段" class="headerlink" title="第三阶段：组件更新阶段：当数据发送变化时，组件会进行重新渲染，所以，准确的说是，组件重新渲染阶段"></a>第三阶段：组件更新阶段：当数据发送变化时，组件会进行重新渲染，所以，准确的说是，组件重新渲染阶段</h6><p>该阶段前后的两个钩子函数：beforeUpdate 和 updated</p><h6 id="第四阶段：组件销毁阶段：组件销毁。"><a href="#第四阶段：组件销毁阶段：组件销毁。" class="headerlink" title="第四阶段：组件销毁阶段：组件销毁。"></a>第四阶段：组件销毁阶段：组件销毁。</h6><p>该阶段前后的两个钩子函数：beforeDestroy 和 destroyed</p><h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><h6 id="当使用keep-alive包裹组件时，会有组件激活和停用之说，这两个钩子函数分别是：activited-和-deactivated"><a href="#当使用keep-alive包裹组件时，会有组件激活和停用之说，这两个钩子函数分别是：activited-和-deactivated" class="headerlink" title="当使用keep-alive包裹组件时，会有组件激活和停用之说，这两个钩子函数分别是：activited  和  deactivated"></a>当使用keep-alive包裹组件时，会有组件激活和停用之说，这两个钩子函数分别是：activited  和  deactivated</h6><hr><h1 id="Vue生命周期详解"><a href="#Vue生命周期详解" class="headerlink" title="Vue生命周期详解"></a>Vue生命周期详解</h1><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/202104231514186151.png"></p><h4 id="使用Vue框架，需要再合适的时机做合适的事情，了解了Vue对象的生命周期和钩子函数，才能知道，哪些事情应该在哪个函数里做。"><a href="#使用Vue框架，需要再合适的时机做合适的事情，了解了Vue对象的生命周期和钩子函数，才能知道，哪些事情应该在哪个函数里做。" class="headerlink" title="使用Vue框架，需要再合适的时机做合适的事情，了解了Vue对象的生命周期和钩子函数，才能知道，哪些事情应该在哪个函数里做。"></a>使用Vue框架，需要再合适的时机做合适的事情，了解了Vue对象的生命周期和钩子函数，才能知道，哪些事情应该在哪个函数里做。</h4><h5 id="一、vue生命周期的理解"><a href="#一、vue生命周期的理解" class="headerlink" title="一、vue生命周期的理解"></a>一、vue生命周期的理解</h5><p>1、生命周期</p><p>用人举例：生命周期就是一个人的一生，从人的出生，到成长，到工作，到死亡，就是人的一生，也叫一个人的生命周期。</p><p>2、对象的生命周期</p><p>在程序开发中对象的生命周期就是：从对象的创建，到使用对象，到对象的消亡整个过程。</p><p>3、Vue的生命周期</p><p>Vue实例，Vue组件实例都是Vue对象，也是对象。所以，Vue的生命周期和对象的生命周期是同样的道理。</p><h5 id="二、Vue生命周期经历的阶段"><a href="#二、Vue生命周期经历的阶段" class="headerlink" title="二、Vue生命周期经历的阶段"></a>二、Vue生命周期经历的阶段</h5><p>Vue对象的生命周期也分不同的阶段，不同的阶段也可以做不同的事情，但是不同的vue（组件）对象在不同的阶段做的事情也不尽相同，所以，每个vue组件的代码不相同。</p><h6 id="Vue生命周期经历哪些阶段："><a href="#Vue生命周期经历哪些阶段：" class="headerlink" title="Vue生命周期经历哪些阶段："></a>Vue生命周期经历哪些阶段：</h6><p>1、总体来说：初始化、运行中、销毁</p><p>2、详细来说：开始创建、初始化数据、编译模板、挂载Dom、渲染–&gt;更新–&gt;渲染、销毁等一系列过程</p><h5 id="三、生命周期经历的阶段和钩子函数"><a href="#三、生命周期经历的阶段和钩子函数" class="headerlink" title="三、生命周期经历的阶段和钩子函数"></a>三、生命周期经历的阶段和钩子函数</h5><h6 id="1、实例化Vue（组件）对象：new-Vue"><a href="#1、实例化Vue（组件）对象：new-Vue" class="headerlink" title="1、实例化Vue（组件）对象：new   Vue()"></a>1、实例化Vue（组件）对象：new   Vue()</h6><h6 id="2、初始化事件和生命周期-init-events-和-init-cycle"><a href="#2、初始化事件和生命周期-init-events-和-init-cycle" class="headerlink" title="2、初始化事件和生命周期  init  events  和  init cycle"></a>2、初始化事件和生命周期  init  events  和  init cycle</h6><h6 id="3、beforeCreated函数："><a href="#3、beforeCreated函数：" class="headerlink" title="3、beforeCreated函数："></a>3、beforeCreated函数：</h6><p>在实例初始化之后，数据观测（data observer）和 event/watcher 事件配置之前被调用。</p><p>此时Vue（组件）对象被创建，但是Vue对象的属性还没有绑定，如果data属性，computed属性还没有绑定，即没有值。</p><p>此时还没有数据和真实DOM。即：属性还没有赋值，也没有动态创建template属性对应的HTML元素（二阶段的createUI海曙还没有执行）</p><h6 id="4、挂载数据（属性赋值）"><a href="#4、挂载数据（属性赋值）" class="headerlink" title="4、挂载数据（属性赋值）"></a>4、挂载数据（属性赋值）</h6><p>包括属性和computed的运算。</p><h6 id="5、Created函数："><a href="#5、Created函数：" class="headerlink" title="5、Created函数："></a>5、Created函数：</h6><p>Vue对象的属性有值了，但是DOM还没有生成，$el属性还不存在。此时有数据了，但是还没有真实DOM</p><p>即：data，computed都执了。属性已经赋值，但还没有动态创建template属性对应的HTML元素，所以，此时如果更改数据不会触发updated函数。</p><p>如果数据初始值就来自于后端，可以发送ajax。或者fetch请求数据。</p><h6 id="6、检查"><a href="#6、检查" class="headerlink" title="6、检查"></a>6、检查</h6><p>1）、检查是否有el属性</p><p>检查Vue配置，即new Vue()里面的el项是否存在，有就继续检查template项。没有则等到手动绑定调用 vm.$mount() </p><p>完成了全局变量$el的绑定。</p><p>2）、检查是否有template属性</p><p>检查配置中的template项，如果没有template进行填充被绑定区域，则被绑定区域的el对象的outerHtml（即整个#app DOM对象，包括</p><div id="app"><div>和</div>标签）都作为被填充对象替换掉填充区域</div><p></p><p>即：如果vue对象中有 template属性，那么，template后面的HTML会替换$el对应的内容。如果有render属性，那么render就会替换template。</p><p>即：优先关系时： render &gt; template &gt; el</p><h6 id="7、beforeMount函数："><a href="#7、beforeMount函数：" class="headerlink" title="7、beforeMount函数："></a>7、beforeMount函数：</h6><p>模板编译（template）数据挂载（把数据显示载模板里）之前执行的钩子函数。</p><p>此时this.$el有值但是数据还没挂载到页面上。即此时页面中的里的变量还没有被数据替换</p><h6 id="8、模板编译："><a href="#8、模板编译：" class="headerlink" title="8、模板编译："></a>8、模板编译：</h6><p>用Vue对象的数据（属性）替换模板中的内容</p><h6 id="9、Mounted函数："><a href="#9、Mounted函数：" class="headerlink" title="9、Mounted函数："></a>9、Mounted函数：</h6><p>模板编译完成，数据挂载完成</p><p>即：此时已经把数据挂载到了页面上，所以，页面上能够看到正确的数据了。</p><p>此处虽然也可以发送异步请求，但是没有created早，所以会显得比较缓慢，所以建议在 creatd里发送请求。</p><h6 id="10、beforeUpdated函数："><a href="#10、beforeUpdated函数：" class="headerlink" title="10、beforeUpdated函数："></a>10、beforeUpdated函数：</h6><p>组件更新之前执行的函数只有数据更新后，才能调用beforeUpdate，注意：此数据一定是在模板上出现的数据，并且改数据值修改前后不一样。否则，不会，也没有必要触发组件更新（因为数据不出现在模板里数据也灭有改变，就没有必要再次渲染）数据更新了，但是Vue（组件）对象对应的DOM中的内部（innerHTML）没有变，所以叫做组件更新前</p><h6 id="11、update函数："><a href="#11、update函数：" class="headerlink" title="11、update函数："></a>11、update函数：</h6><p>组件更新之后执行的函数</p><p>Vue（组件）对象对应的dom中的内部（innerHTML）改变了，所以叫做组更新之后</p><h6 id="12、activated函数："><a href="#12、activated函数：" class="headerlink" title="12、activated函数："></a>12、activated函数：</h6><p>keep-alive组件激活时调用</p><h6 id="13、deactivated函数："><a href="#13、deactivated函数：" class="headerlink" title="13、deactivated函数："></a>13、deactivated函数：</h6><p>keep-alive组件停用时调用</p><h6 id="14、beforeDestory："><a href="#14、beforeDestory：" class="headerlink" title="14、beforeDestory："></a>14、beforeDestory：</h6><p>Vue（组件）对象销毁之前。</p><p>在这个生命周期钩子函数里，可以销毁定时器，因为定时器时全局的，属于window对象的，所以，组件销毁时，并不会销毁定时器</p><h6 id="15、destroyed："><a href="#15、destroyed：" class="headerlink" title="15、destroyed："></a>15、destroyed：</h6><p>Vue组件销毁后</p><h5 id="四、测试代码："><a href="#四、测试代码：" class="headerlink" title="四、测试代码："></a>四、测试代码：</h5><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;  &lt;title&gt;vue生命周期学习&lt;/title&gt;  &lt;/head&gt;&lt;body&gt;  &lt;div id="app"&gt;    &lt;h1&gt;{{message}}&lt;/h1&gt;    &lt;h1&gt;count:{{count}}&lt;/h1&gt;  &lt;/div&gt;  &lt;input id="btn01" type="button" value="测试" /&gt;&lt;/body&gt;&lt;script type="text/javascript" src="js/vue.min.js" &gt;&lt;/script&gt;&lt;script&gt;  var vm = new Vue({    el: '#app',    data: {      message: 'Vue的生命周期',      age:2    },    computed:{    count:function(){    return this.age+1;    }    },//  template:"&lt;p&gt;vue对象中的template的内容&lt;/p&gt;",//  render: function(createElement) {//      return createElement('h1', 'this is createElement')//  },    beforeCreate: function() {      console.group('------beforeCreate创建前状态------');      console.log("%c%s", "color:red" , "el     : " + this.$el); //undefined      console.log("%c%s", "color:red","data   : " + this.$data); //undefined      console.log("%c%s", "color:red","count   : " + this.count); //undefined       console.log("%c%s", "color:red","message: " + this.message)     },    created: function() {      console.group('------created创建完毕状态------');      console.log("%c%s", "color:red","el     : " + this.$el); //undefined      console.log("%c%s", "color:red","data   : " + this.$data); //已被初始化       console.log("%c%s", "color:red","count   : " + this.count); //undefined       console.log("%c%s", "color:red","message: " + this.message); //已被初始化    },    //完成了el的绑定    beforeMount: function() {       console.group('------beforeMount挂载前状态------');       console.log("%c%s", "color:red","el     : " + (this.$el)); //已被初始化       console.log(this.$el.innerHTML);           console.log("%c%s", "color:red","data   : " + this.$data); //已被初始化         console.log("%c%s", "color:red","message: " + this.message); //已被初始化      },    mounted: function() {      console.group('------mounted 挂载结束状态------');      console.log("%c%s", "color:red","el     : " + this.$el); //已被初始化      console.log(this.$el);          console.log(this.$el.innerHTML);          console.log("%c%s", "color:red","data   : " + this.$data); //已被初始化      console.log("%c%s", "color:red","message: " + this.message); //已被初始化     },    beforeUpdate: function () {      console.group('beforeUpdate 更新前状态===============》');      console.log("%c%s", "color:red","el     : " + this.$el);      console.log(this.$el.innerHTML);      console.log("%c%s", "color:red","data   : " + this.$data.message);       console.log("%c%s", "color:red","message: " + this.message);     }    ,    updated: function () {      console.group('updated 更新完成状态===============》');      console.log("%c%s", "color:red","el     : " + this.$el);      console.log(this.$el.innerHTML);         console.log("%c%s", "color:red","data   : " + this.$data);       console.log("%c%s", "color:red","message: " + this.message);     },//  beforeDestroy: function () {//    console.group('beforeDestroy 销毁前状态===============》');//    console.log("%c%s", "color:red","el     : " + this.$el);//    console.log(this.$el);    //    console.log("%c%s", "color:red","data   : " + this.$data); //    console.log("%c%s", "color:red","message: " + this.message); //  },//  destroyed: function () {//    console.group('destroyed 销毁完成状态===============》');//    console.log("%c%s", "color:red","el     : " + this.$el);//    console.log(this.$el);  //    console.log("%c%s", "color:red","data   : " + this.$data); //    console.log("%c%s", "color:red","message: " + this.message)//  }  });    document.getElementById("btn01").onclick = function(){  vm.message="改了";  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="五、模拟Vue的构造函数（部分代码）"><a href="#五、模拟Vue的构造函数（部分代码）" class="headerlink" title="五、模拟Vue的构造函数（部分代码）"></a>五、模拟Vue的构造函数（部分代码）</h5><p>myVue.js</p><pre class="line-numbers language-none"><code class="language-none">class MyVue{constructor(obj){//默认值let defaultObj={  data: null,  computed:null,  watch:null,  beforeCreate:function(){  },  created:function(){  },  beforeMount:function(){  },  mounted:function(){  }}for(let key in defaultObj){obj[key]?this[key]=obj[key]:this[key]=defaultObj[key];}//对象创建完毕已经有this了。this.beforeCreate();//挂载数据：//1）、把传入的data属性的值赋给thisif(obj.data){for(let key in this.data){this[key] = obj.data[key];}this.$data = obj.data;//设置全局变量}//2）、计算属性if(obj.computed){for(let key in obj.computed){this[key] = obj.computed[key].call(this);}}//created函数this.created();//检查是否有el属性if(obj.el){this.el = $(obj.el);this.$el = $(obj.el);//设置全局变量}//检查是否有template属性if(this.template){//this.template = obj.template;//动态创建template 里所有的html元素}//beforeMonutethis.beforeMount();//用vue对象的数据（属性）替换模板中的内容//1)、替换data中的数据let html = this.el.innerHTML;for(let key in this.data){//用属性值替换，属性名（页面上用双花括号包起来的）html=html.replace(new RegExp("{{"+key+"}}","g"),this[key]);}//2)、替换computed中的数据for(let key in this.computed){//用属性值替换，属性名（页面上用双花括号包起来的）html=html.replace(new RegExp("{{"+key+"}}","g"),this[key]);}this.el.innerHTML = html;//mounted函数：this.mounted();}addWatch(){}//数据双向绑定//} function $(str){//#box .cls  pif(str.charAt(0)=="#"){return document.getElementById(str.substring(1));}else if(str.charAt(0)=="."){return document.getElementsByClassName(str.substring(1));}else{return document.getElementsByTagName(str);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;  &lt;div id="app"&gt;    &lt;h1&gt;{{message}}&lt;/h1&gt;    &lt;h1&gt;count:{{count}}&lt;/h1&gt;  &lt;/div&gt;&lt;/body&gt;&lt;script type="text/javascript" src="js/myvue.js" &gt;&lt;/script&gt;&lt;script&gt;  var vm = new MyVue({    el: '#app',    data: {      message: 'Vue的生命周期',      age:1    },    computed:{        count:function(){           return this.age+1;        }    },    beforeCreate: function() {      console.group('------beforeCreate创建前状态------');      console.log("%c%s", "color:red" , "el     : " + this.$el); //undefined      console.log("%c%s", "color:red","data   : " + this.$data); //undefined      console.log("%c%s", "color:red","message: " + this.message)    },    created: function() {      console.group('------created创建完毕状态------');      console.log("%c%s", "color:red","el     : " + this.$el); //undefined      console.log("%c%s", "color:red","data   : " + this.$data); //已被初始化      console.log("%c%s", "color:red","message: " + this.message); //已被初始化    },    //完成了el的绑定    beforeMount: function() {       console.group('------beforeMount挂载前状态------');       console.log("%c%s", "color:red","el     : " + (this.$el)); //已被初始化       console.log(this.$el);       console.log(this.$el.innerHTML);          console.log("%c%s", "color:red","data   : " + this.$data); //已被初始化        console.log("%c%s", "color:red","message: " + this.message); //已被初始化     },    mounted: function() {      console.group('------mounted 挂载结束状态------');      console.log("%c%s", "color:red","el     : " + this.$el); //已被初始化      console.log(this.$el);         console.log(this.$el.innerHTML);         console.log("%c%s", "color:red","data   : " + this.$data); //已被初始化      console.log("%c%s", "color:red","message: " + this.message); //已被初始化    }     })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="7、Vue的父组件和子组件生命周期钩子函数执行顺序？"><a href="#7、Vue的父组件和子组件生命周期钩子函数执行顺序？" class="headerlink" title="7、Vue的父组件和子组件生命周期钩子函数执行顺序？"></a>7、Vue的父组件和子组件生命周期钩子函数执行顺序？</h2><h3 id="Vue的父子组件钩子函数的执行顺序可以归类为4个部分："><a href="#Vue的父子组件钩子函数的执行顺序可以归类为4个部分：" class="headerlink" title="Vue的父子组件钩子函数的执行顺序可以归类为4个部分："></a>Vue的父子组件钩子函数的执行顺序可以归类为4个部分：</h3><h5 id="第一部分：首次加载渲染"><a href="#第一部分：首次加载渲染" class="headerlink" title="第一部分：首次加载渲染"></a>第一部分：首次加载渲染</h5><h6 id="父-beforeCreated-gt-父-created-gt-父-beforeMount-gt-子-beforeCreate-gt-子-created-gt-子-beforeMount-gt-子-mounted-gt-父-mounted"><a href="#父-beforeCreated-gt-父-created-gt-父-beforeMount-gt-子-beforeCreate-gt-子-created-gt-子-beforeMount-gt-子-mounted-gt-父-mounted" class="headerlink" title="父 beforeCreated->父 created -> 父 beforeMount -> 子 beforeCreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted"></a>父 beforeCreated-&gt;父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</h6><h5 id="第二部分：父组件修改子组件的props值时："><a href="#第二部分：父组件修改子组件的props值时：" class="headerlink" title="第二部分：父组件修改子组件的props值时："></a>第二部分：父组件修改子组件的props值时：</h5><h6 id="父-beforeUpdate-gt-子-beforeUpdate-gt-子-updated-gt-父-updated"><a href="#父-beforeUpdate-gt-子-beforeUpdate-gt-子-updated-gt-父-updated" class="headerlink" title="父 beforeUpdate -> 子 beforeUpdate -> 子 updated -> 父 updated"></a>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</h6><h5 id="第三部分：父组件修改的数据跟子组件没有关系时："><a href="#第三部分：父组件修改的数据跟子组件没有关系时：" class="headerlink" title="第三部分：父组件修改的数据跟子组件没有关系时："></a>第三部分：父组件修改的数据跟子组件没有关系时：</h5><h6 id="不会影响子组件-父-beforeUpdate-gt-父-updated"><a href="#不会影响子组件-父-beforeUpdate-gt-父-updated" class="headerlink" title="不会影响子组件 父 beforeUpdate -> 父 updated"></a>不会影响子组件 父 beforeUpdate -&gt; 父 updated</h6><h5 id="第四部分：销毁过程"><a href="#第四部分：销毁过程" class="headerlink" title="第四部分：销毁过程"></a>第四部分：销毁过程</h5><h6 id="父-beforeDestroy-gt-子-beforeDestroy-gt-子-destroyed-gt-父-destroyed"><a href="#父-beforeDestroy-gt-子-beforeDestroy-gt-子-destroyed-gt-父-destroyed" class="headerlink" title="父 beforeDestroy -> 子 beforeDestroy -> 子 destroyed -> 父 destroyed"></a>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</h6><hr><h2 id="8、在那个生命周期内调用异步请求？"><a href="#8、在那个生命周期内调用异步请求？" class="headerlink" title="8、在那个生命周期内调用异步请求？"></a>8、在那个生命周期内调用异步请求？</h2><h5 id="答：大部分时候，会在created发送请求。"><a href="#答：大部分时候，会在created发送请求。" class="headerlink" title="答：大部分时候，会在created发送请求。"></a>答：大部分时候，会在created发送请求。</h5><h6 id="1）、此时data已经挂载到Vue实例了，放在beforeCreate里太早，Vue实例没有数据，放在mounted里太晚"><a href="#1）、此时data已经挂载到Vue实例了，放在beforeCreate里太早，Vue实例没有数据，放在mounted里太晚" class="headerlink" title="1）、此时data已经挂载到Vue实例了，放在beforeCreate里太早，Vue实例没有数据，放在mounted里太晚"></a>1）、此时data已经挂载到Vue实例了，放在beforeCreate里太早，Vue实例没有数据，放在mounted里太晚</h6><h6 id="2）、放在-created-中有助于一致性，因为ssr不支持-beforeMount-、mounted-钩子函数。"><a href="#2）、放在-created-中有助于一致性，因为ssr不支持-beforeMount-、mounted-钩子函数。" class="headerlink" title="2）、放在 created 中有助于一致性，因为ssr不支持 beforeMount 、mounted 钩子函数。"></a>2）、放在 created 中有助于一致性，因为ssr不支持 beforeMount 、mounted 钩子函数。</h6><p>Created的使用场景：如果组件的初始数据来自于后端，那就在created里发送请求</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题合集--JS</title>
      <link href="/2023/01/17/mian-shi-ti-he-ji-js/"/>
      <url>/2023/01/17/mian-shi-ti-he-ji-js/</url>
      
        <content type="html"><![CDATA[<h2 id="let-与-var"><a href="#let-与-var" class="headerlink" title="let 与 var"></a>let 与 var</h2><p>答：</p><p>var  =&gt;  1.声明提升</p><p>​  2.没有局部作用域</p><p>​  3.声明覆盖</p><h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><p>深拷贝和浅拷贝主要针对对象的属性是对象（引用类型）</p><h3 id="一、基本类型和引用类型的区别"><a href="#一、基本类型和引用类型的区别" class="headerlink" title="一、基本类型和引用类型的区别"></a>一、基本类型和引用类型的区别</h3><h5 id="1-先了解内存"><a href="#1-先了解内存" class="headerlink" title="1.先了解内存"></a>1.先了解内存</h5><p>任何编程语言的内存分区几乎都是一样的</p><p>内存是存储数据的，不同类型的数据要存储在不同的区域，及分类存放，不同的区域作用和功能也不一样。</p><p>以下为内存的分区图。内存分为四个区域：栈区（堆栈），堆区，全局静态区，只读区（常量区和代码区）</p><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/QQ图片20230117203930.png"></p><p>1、栈区</p><p>1）存放的数据：局部变量，形参，被调用函数的地址（这个可以不用管）等等。</p><p> 2）特点：</p><p>读取速度快，存储和释放的思路是按照数据结构中的栈进行的，存数据就是压栈，释放就是弹栈。</p><p>空间小，基本类型的数据占用空间的大小不会随着值的改变而改变，而且占用空间小。</p><p>2、堆区：</p><p> 1）、存放数据：new出来的数据。</p><p>2）、特点： 读取速度慢</p><p>​   空间大：引用类型的数据大小是动态的，会随着数据的增加而改变大小</p><p>3、全局静态区：</p><p>1）、存放数据：全局变量和静态变量</p><p>2）、特点：在程序运行过程中，数据会一直在内存中。</p><p>4、只读区：</p><p>1）、存放数据：常量区存放常量，代码区存放程序的代码（程序运行时是需要载入到内存中允许的）</p><p>2）、特点：此区域的数据在程序运行过程中肯定不能改变。</p><h5 id="2-基本类型和引用类型在内存存储的区别"><a href="#2-基本类型和引用类型在内存存储的区别" class="headerlink" title="2.基本类型和引用类型在内存存储的区别"></a>2.基本类型和引用类型在内存存储的区别</h5><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/20190807124758680.png"></p><p>以上函数test在调用时，</p><p>   1）、 定义局部变量 age，由于age是局部变量，所以在栈中申请内存空间，起名为age，又由于给age赋的值250是基本类型，所以，值直接存储在栈中。</p><p>   2）、定义局部变量arr，由于arr是局部变量，所以在栈中申请空间，但是arr的内存中存储的是什么？由于给arr赋的值不是基本类型，而是引用类型（new出来的），所以，先在堆中申请空间存放数据 12,23,34,。再把堆区的地址赋给arr。</p><h5 id="3、到底什么是基本类型和引用类型"><a href="#3、到底什么是基本类型和引用类型" class="headerlink" title="3、到底什么是基本类型和引用类型"></a>3、到底什么是基本类型和引用类型</h5><p>1）、基本类型：就是值类型，即在变量所对应的内存区域存储的是值，如：上面的age变量所对应的内存存储的就是值250.</p><p>2）、引用类型：就是地址类型。</p><p>何为地址：地址就是编号，要地址何用，就是为了容易找到。每个人的家里为什么要有一个唯一的地址，就是在邮寄时，能够找到你家。</p><p>比如：我们最早的超市存包的格子，每个格子都有个编号，你存包时，服务员会把你的东西放在某个格子里，再把这个格子的编号给你（一个牌子）。你购物完毕取包时，直接给服务员你的牌子（有编号），服务员根据你的编号就会找到你的包。这个编号就是格子的地址。内存也是一样的，每个内存都有一个编号，方便cpu查找。要不然，浩瀚的内存海洋，cpu要找到数据靠啥找。</p><p>以上的变量arr就是引用类型，arr所对应的内存中存储着地址，真正的数据是在地址对应的内存区域里，就像，你填写简历时，会在简历的那张纸上写上你家的地址。简历上写你家地址的地方就相当于arr。而你家是根据这个地址可以找到的。简历上写你家地址的地方就相当于引用着你家（可以想象一根无形的线牵引着你家，在简历上的这根无形的线，顺藤摸瓜就能找到你家）。所以叫做引用类型。</p><h3 id="二、基本类型和引用类型在赋值时内存的变化"><a href="#二、基本类型和引用类型在赋值时内存的变化" class="headerlink" title="二、基本类型和引用类型在赋值时内存的变化"></a>二、基本类型和引用类型在赋值时内存的变化</h3><p>你可以认为，赋值就是在拷贝。</p><h5 id="1、基本类型："><a href="#1、基本类型：" class="headerlink" title="1、基本类型："></a>1、基本类型：</h5><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/基本类型.png"></p><h5 id="2、引用类型："><a href="#2、引用类型：" class="headerlink" title="2、引用类型："></a>2、引用类型：</h5><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/引用类型.png"></p><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><p>其实在第二点已经说到了拷贝，所谓拷贝，就是赋值。把一个变量赋给另外一个变量，就是把变量的内容进行拷贝。把一个对象的值赋给另外一个对象，就是把一个对象拷贝一份。</p><h3 id="1、基本类没有问题，"><a href="#1、基本类没有问题，" class="headerlink" title="1、基本类没有问题，"></a>1、基本类没有问题，</h3><p>因为，基本类型赋值时，赋的是数据（所以，不存在深拷贝和浅拷贝的问题）。</p><p>​    如：</p><p>  Var x = 100;</p><p>  Var y = x; //此时x和y都是100;</p><p>  如果要改变y的值，x的值不会改变。</p><h3 id="2、引用类型有问题"><a href="#2、引用类型有问题" class="headerlink" title="2、引用类型有问题"></a>2、引用类型有问题</h3><p>  因为，引用类型赋值时，赋的值地址（就是引用类型变量在内存中保存的内容），强烈建议把前面的第二点（基本类型和引用类型在赋值时内存的变化）多看几遍，以保证理解深刻。这样，一劳永逸，以后在碰到任何跟引用类型有关的话题（如：继承时，父类的属性是引用类型）都没有问题。</p><p>如：</p><p>var arr1 = new Array(12,23,34)</p><p>Var arr2 = arr1;//这就是一个最简单的浅拷贝</p><p>如果要改变arr2所引用的数据：arr2[0]=100时，那么arr1[0]的值也是100。</p><p>​    原因就是 arr1和arr2引用了同一块内存区域（以上的第二点中有体现）。</p><h3 id="3、用json对象的方式-（也是引用类型）来演示浅拷贝和深拷贝"><a href="#3、用json对象的方式-（也是引用类型）来演示浅拷贝和深拷贝" class="headerlink" title="3、用json对象的方式 （也是引用类型）来演示浅拷贝和深拷贝"></a>3、用json对象的方式 （也是引用类型）来演示浅拷贝和深拷贝</h3><h5 id="1）、定义一个json对象（对象的属性也是对象）"><a href="#1）、定义一个json对象（对象的属性也是对象）" class="headerlink" title="1）、定义一个json对象（对象的属性也是对象）"></a>1）、定义一个json对象（对象的属性也是对象）</h5><pre class="line-numbers language-none"><code class="language-none">let p = {"id":"007","name":"刘德华","books": new Array("三国","水浒传","红楼梦")}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内存图：</p><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/内存图.png"></p><h5 id="2）、把该对象p进行复制一份"><a href="#2）、把该对象p进行复制一份" class="headerlink" title="2）、把该对象p进行复制一份"></a>2）、把该对象p进行复制一份</h5><h5 id="（一）浅拷贝-引用类型浅拷贝，基本类型深拷贝"><a href="#（一）浅拷贝-引用类型浅拷贝，基本类型深拷贝" class="headerlink" title="（一）浅拷贝(引用类型浅拷贝，基本类型深拷贝)"></a>（一）浅拷贝(引用类型浅拷贝，基本类型深拷贝)</h5><pre class="line-numbers language-none"><code class="language-none">let p2 = {};for(let key in p){p2[key] = p[key];}p2.books[0] = "四国";console.log(p2);console.log(p);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在控制台中打印的结果（p和p2的books[0]都变成了“四国”）：</p><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/20190807125636194.png"></p><p>内存：</p><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/20190807125742367.png"></p><h5 id="二-深拷贝（初步）"><a href="#二-深拷贝（初步）" class="headerlink" title="(二)深拷贝（初步）"></a>(二)深拷贝（初步）</h5><pre class="line-numbers language-none"><code class="language-none">var p2 = {};for(let key in p){if(typeof p[key]=='object'){p2[key]=[];//因为,我上面写的是数组,所以,暂时赋值一个空数组.for(let i in p[key]){p2[key][i] = p[key][i]}}else{p2[key] = p[key];}}p2.books[0] ="四国";console.log(p2);console.log(p)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在控制台中打印的结果（只有p2的books[0]变成了“四国”）</p><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/20190807125846495.png"></p><p>内存：</p><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/20190807125947792.png"></p><h5 id="深拷贝-（最终）"><a href="#深拷贝-（最终）" class="headerlink" title="(深拷贝)（最终）"></a>(深拷贝)（最终）</h5><h6 id="3-1、深拷贝-如果属性都是json对象，那么用递归的方式"><a href="#3-1、深拷贝-如果属性都是json对象，那么用递归的方式" class="headerlink" title="3.1、深拷贝_如果属性都是json对象，那么用递归的方式"></a>3.1、深拷贝_如果属性都是json对象，那么用递归的方式</h6><p>如果对象的属性是对象(引用类型),属性的属性也是引用类型,即层层嵌套很多.怎么办,只能递归</p><p>如下对象</p><pre class="line-numbers language-none"><code class="language-none">var p = {"id":"007","name":"刘德华","wife":{"id":"008","name":"刘德的妻子","address":{"city":"北京","area":"海淀区"}}}//写函数function copyObj(obj){let newObj={};for(let key in obj){if(typeof obj[key] =='object'){//如:key是wife,引用类型,那就递归newObj[key] = copyObj(obj[key])}else{//基本类型,直接赋值newObj[key] = obj[key];}}return newObj;}let pNew = copyObj(p);pNew.wife.name="张三疯";pNew.wife.address.city = "香港";console.log(pNew);console.log(p);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/20190807130050596.png"></p><h6 id="3-2、深拷贝-如果属性是数组等非键值对的对象"><a href="#3-2、深拷贝-如果属性是数组等非键值对的对象" class="headerlink" title="3.2、深拷贝_如果属性是数组等非键值对的对象"></a>3.2、深拷贝_如果属性是数组等非键值对的对象</h6><p>需要单独处理：</p><pre class="line-numbers language-none"><code class="language-none">//给数组对象增加一个方法，用来复制自己Array.prototype.copyself = function(){let arr = new Array();for(let i in this){arr[i]  = this[i]}return arr;} var p = {"id":"007","name":"刘德华","books":new Array("三国演义","红楼梦","水浒传")//这是引用类型} function copyObj(obj){let newObj={};for(let key in obj){if(typeof obj[key] =='object'){//如:key是wife,引用类型,那就递归newObj[key] = obj[key].copyself();}else{//基本类型,直接赋值newObj[key] = obj[key];}}return newObj;} var pNew = copyObj(p);pNew.books[0] = "四国";console.log(pNew);console.log(p);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/20190807130143411.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题合集-CSS</title>
      <link href="/2023/01/17/mian-shi-ti-he-ji-css/"/>
      <url>/2023/01/17/mian-shi-ti-he-ji-css/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS–快速布局居中对齐"><a href="#CSS–快速布局居中对齐" class="headerlink" title="CSS–快速布局居中对齐"></a>CSS–快速布局居中对齐</h2><p><img width="300" src="https://stayawake.oss-cn-beijing.aliyuncs.com/S`1IT0{JFUM12L81CSG}D5O.png"></p><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    *{        margin: 0;        padding: 0;    }    html,body{        height: 100%;        width: 100%;    }    .box{        width: 200px;         height: 200px;        background-color: blueviolet;        margin: auto;    }   body{        display: flex;   }&lt;/style&gt;&lt;body&gt;    &lt;div class="box"&gt;        &lt;h2&gt;快速居中对齐&lt;/h2&gt;    &lt;/div&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS–-padding和margin有什么不同？"><a href="#CSS–-padding和margin有什么不同？" class="headerlink" title="CSS– padding和margin有什么不同？"></a>CSS– padding和margin有什么不同？</h2><p>答：作用对象不同， padding作用于自身，margin作用于外部对象</p><h2 id="CSS–-vw和百分比有什么区别？"><a href="#CSS–-vw和百分比有什么区别？" class="headerlink" title="CSS– vw和百分比有什么区别？"></a>CSS– vw和百分比有什么区别？</h2><p>答： 百分比有继承关系，vw只和设备宽度有关系</p><h2 id="如何让浏览器支持小字体？"><a href="#如何让浏览器支持小字体？" class="headerlink" title="如何让浏览器支持小字体？"></a>如何让浏览器支持小字体？</h2><p>答： 缩放</p><pre class="line-numbers language-none"><code class="language-none">transform: scale(0.8);-webkit-transform: scale(0.8);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题-浏览器跨域系列问题</title>
      <link href="/2023/01/03/qian-duan-mian-shi-ti-liu-lan-qi-kua-yu-xi-lie-wen-ti/"/>
      <url>/2023/01/03/qian-duan-mian-shi-ti-liu-lan-qi-kua-yu-xi-lie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器跨域问题"><a href="#浏览器跨域问题" class="headerlink" title="浏览器跨域问题"></a>浏览器跨域问题</h1><h3 id="1、浏览器同源策略"><a href="#1、浏览器同源策略" class="headerlink" title="1、浏览器同源策略"></a>1、浏览器同源策略</h3><p>浏览器出于安全考虑，对<font color="red"><strong>同源请求</strong></font> 放行 ,对  <font color="red"><strong>异源请求</strong></font>  限制。</p><p>这些限制规则统称为同源策略。</p><p>因此限制造成的开发问题，称之为<strong>跨域（异源）问题</strong></p><p>何为<font color="red"><strong>同源？</strong></font></p><h3 id="源-x3D-协议-域名-端口"><a href="#源-x3D-协议-域名-端口" class="headerlink" title="源    =协议+域名+端口"></a>源    =协议+域名+端口</h3><p> <a href="http://a.com:81/">http://a.com:81</a></p><p>http –&gt;&gt;协议</p><p>a.com –&gt;&gt; 域名</p><p>81  –&gt;&gt;端口</p><p>协议+域名+端口 这三这个都相同的两个网址为同源，其他为异源</p><p>何为<font color="red"><strong>同源请求？</strong></font></p><p>这里<code>原作者</code>有个<code>笔误</code>，左边手机截图把<code>https://api.mywebsite.com</code>误写为<code>https://www.mywebsite.com</code>了，图中也有这个错误，读者要注意一下不要被误导</p><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/%E5%90%8C%E6%BA%90%E8%AF%B7%E6%B1%82.gif"></p><p><font color="red"><strong>异源请求</strong></font></p><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/%E5%BC%82%E6%BA%90%E8%AF%B7%E6%B1%82.gif"></p><h2 id="浏览器的同源策略"><a href="#浏览器的同源策略" class="headerlink" title="浏览器的同源策略"></a>浏览器的同源策略</h2><p>浏览器如何限制？</p><p>对标签发出的跨域请求轻微限制</p><p>例如 ： link  –&gt;&gt;CSS、script –&gt;&gt; JS、img、video、audio</p><p>对  <font color="red"><strong>AJAX</strong></font>  发出的跨域请求<font color="red"><strong>严厉限制</strong></font></p><img width="500" height="300" src="https://stayawake.oss-cn-beijing.aliyuncs.com/Screenshot_20230103_140514.jpg"><p>发生ajax进行跨域，浏览器也会对服务器发送完整的请求，发生跨域问题使因为浏览器响应时浏览器会进行校验，校验不通过</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><img width="500" src="https://stayawake.oss-cn-beijing.aliyuncs.com/Screenshot_20230103_141727.jpg"><p>答案是第三个，你答对了吗？</p><h1 id="跨域问题解决方案—-CORS"><a href="#跨域问题解决方案—-CORS" class="headerlink" title="跨域问题解决方案—-CORS"></a>跨域问题解决方案—-CORS</h1><img width="500" height="300" src="https://stayawake.oss-cn-beijing.aliyuncs.com/IMG_20230103_231517.jpg"><p>跨域问题，是因为校验不通过，这个校验规则就是CORS规则</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><h6 id="CORS是一套机制用于浏览器校验跨域请求"><a href="#CORS是一套机制用于浏览器校验跨域请求" class="headerlink" title="CORS是一套机制用于浏览器校验跨域请求"></a>CORS是一套机制用于浏览器校验跨域请求</h6><h6 id="基本理念："><a href="#基本理念：" class="headerlink" title="基本理念："></a>基本理念：</h6><p>只要是服务器明确表示允许，则校验通过，</p><p>服务器明确<font color="red">拒绝</font>或<font color="red">没有表示</font>，则校验不通过。</p><p>注：（使用CORS方案的前提，必须保证服务器是[自己人]）</p><h5 id="CORS将请求分为两类："><a href="#CORS将请求分为两类：" class="headerlink" title="CORS将请求分为两类："></a>CORS将请求分为两类：</h5><h5 id="简单请求-预检请求"><a href="#简单请求-预检请求" class="headerlink" title="简单请求                                                                  预检请求"></a>简单请求                                                                  预检请求</h5><p>1、请求方式为： GET     POSTHEAD非简单请求</p><p>2、头部字段满足CORS的安全规范，详见W3C    </p><p>（粗略认知：一般不修改头部就是符合安全规范，修改之后就不符合规范）</p><p>3、请求头的Content-Type为：text/plain</p><p>​ multipart/from-data</p><p>​ application/x-www-form-urlencoded</p><p>简单请求基本过程：</p><p>浏览器发送请求，如果发现跨域，会自动携带请求头 Orgin:   http://,y.com (Orgin后通常携带的是页面源，从哪个源发送请求)，之后服务器进行验证，验证通过后，服务器有两种告诉浏览器验证通过的方法。</p><p>1、返回相应头： Access-Control-Allow-Orgin: <a href="http://my.com/">http://my.com</a> (携带一致的源) 浏览器检测源相同，校验通过</p><p>2、返回响应头：Access-Control-Allow-Orgin：* (表示所有源都通过)，浏览器校验直接通过</p><img width="500" height="300" src="https://stayawake.oss-cn-beijing.aliyuncs.com/IMG_20230103_234752.jpg"><p>预检请求基本过程：</p><p>1、发送预检请求：</p><p>浏览器发送预检请求，携带options 里面包括 Orgin ，请求方式，请求头，</p><p>服务器会返回自己允许的域，请求方式，请求头</p><img width="500" height="300" src="https://stayawake.oss-cn-beijing.aliyuncs.com/IMG_20230103_235238.jpg"><p>浏览器校验通过后，才会发送真实请求：和简单请求一样</p><p>CORS解决方案就是 服务器根据浏览器规范对相应的请求头做出相应的设置就可</p><h1 id="跨域问题解决方案—-JSONP"><a href="#跨域问题解决方案—-JSONP" class="headerlink" title="跨域问题解决方案—-JSONP"></a>跨域问题解决方案—-JSONP</h1><h3 id="JSONP-JSON-with-Padding"><a href="#JSONP-JSON-with-Padding" class="headerlink" title="JSONP     JSON   with Padding"></a>JSONP     JSON   with Padding</h3><p>JSONP是解决跨域问题额古老方案</p><p>同源策略中，对标签的跨域请求限制较小</p><p>JSONP利用这一点。</p><p><img width="500" src="https://stayawake.oss-cn-beijing.aliyuncs.com/IMG_20230108_171137.jpg"></p><p>JSONP原理：</p><p>通过script标签向服务器端发送一个get请求，服务端返回一个text/plain格式的文件，文件内容是对一个方法的调用，并回传数据，如下：</p><pre class="line-numbers language-none"><code class="language-none">callback('hello,word')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;    &lt;head&gt;        &lt;meta charset="utf-8"&gt;        &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;        &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;        &lt;title&gt;Title Page&lt;/title&gt;    &lt;/head&gt;    &lt;script&gt;        function callback(resp){            console.log(resp);        }        function request(url){            const script = document.createElement('script');            script.src = url;            script.onload = function(){                script.remove();            }            document.body.appendChild(script)        }        document.querySelector('button').onclick = function(){            // 接口地址            request('http://localhost:8000/api/user');        }    &lt;/script&gt;    &lt;body&gt;       &lt;button &gt;点击获取用户&lt;/button&gt;    &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSONP其实已经跟AJAX脱离关系，JQuery只是对这个函数的封装</p><p>JSONP跨域缺点：</p><ul><li>只能发送get请求，不支持post put delete</li><li>不安全，xss攻击，返回的内容可以对网站内容进行篡改</li></ul><h1 id="跨域问题解决方案—-代理"><a href="#跨域问题解决方案—-代理" class="headerlink" title="跨域问题解决方案—-代理"></a>跨域问题解决方案—-代理</h1><h3 id="跨域解决方案中-CORS和-JSONP-均对服务器有要求"><a href="#跨域解决方案中-CORS和-JSONP-均对服务器有要求" class="headerlink" title="跨域解决方案中 CORS和 JSONP 均对服务器有要求"></a>跨域解决方案中 CORS和 JSONP 均对服务器有要求</h3><p><img width="500" height="300" src="https://stayawake.oss-cn-beijing.aliyuncs.com/IMG_20230108_234712.jpg"></p><p>CORS ： 需要设置请求头</p><p>JSONP：需要服务器相应JS代码并且还需要调用方法</p><p>代理解决跨域的方式</p><p><img width="500" src="https://stayawake.oss-cn-beijing.aliyuncs.com/IMG_20230108_235200.jpg"></p><h3 id="本地启动服务解决跨域"><a href="#本地启动服务解决跨域" class="headerlink" title="本地启动服务解决跨域"></a>本地启动服务解决跨域</h3><p>前端项目在本地环境之所以能启动，是因为本地启动了一个Node服务器，我们可以让这台服务器作为代理服务器去完成请求的发送。</p><p>vue-cli本身提供了vue.config.js配置文件来配置服务器的代理，通过配置devServer可以实现这一效果：</p><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/f108b8593bca5e56db3e8512807ba4fd.png"></p><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/2fc3a77464c5edfd1cd10c9c17419b00.png"></p><p>如上图所示，在浏览器看来访问的/disease-api，是localhost:9528这个ip和端口的服务,符合同源策略，所以浏览器并不会认为这是跨域。</p><p>实际上，服务器在拦截到带有/disease-api/后，会将访问前缀更换为指定目标【target】，实际时访问的是 <a href="https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5%E3%80%82">https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5。</a></p><p>部署后的服务解决跨域</p><p>前端项目部署后，因为没有了本地的Node环境，可以通过nginx服务器来完成反向代理。</p><p>特别注意，此种情况需要服务器自身能够访问<a href="https://view.inews.qq.com/disease-api/g2/getOnsInfo?name=disease_h5%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%89%8D%E8%AF%B7%E7%A1%AE%E8%AE%A4%E3%80%82">https://view.inews.qq.com/disease-api/g2/getOnsInfo?name=disease_h5，使用前请确认。</a></p><h1 id="跨域经典场景"><a href="#跨域经典场景" class="headerlink" title="跨域经典场景"></a>跨域经典场景</h1><p><img width="500" height="500" src="https://stayawake.oss-cn-beijing.aliyuncs.com/IMG_20230109_000755.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NProgress使用笔记</title>
      <link href="/2022/12/27/nprogress-shi-yong-bi-ji/"/>
      <url>/2022/12/27/nprogress-shi-yong-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="NProgress使用笔记"><a href="#NProgress使用笔记" class="headerlink" title="NProgress使用笔记"></a>NProgress使用笔记</h1><p>关于在vue项目中使用Nprogress来显示页面顶部的进度条笔记</p><h4 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h4><p><a href="https://github.com/rstacruz/nprogress">https://github.com/rstacruz/nprogres</a></p><h4 id="演示网站"><a href="#演示网站" class="headerlink" title="演示网站"></a>演示网站</h4><p><a href="https://ricostacruz.com/nprogress/">https://ricostacruz.com/nprogress/</a></p><h2 id="安装-基本用法"><a href="#安装-基本用法" class="headerlink" title="安装+基本用法"></a>安装+基本用法</h2><pre class="line-numbers language-none"><code class="language-none">// 下载安装npm i nprogress -S// 基本用法NProgress.start();NProgress.done();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><h5 id="递增："><a href="#递增：" class="headerlink" title="递增："></a>递增：</h5><p>要递增进度条，只需使用  .inc() 。这使它以随机量递增。这将永远不会达到100%； 将其用于每次图片加载（或类似加载）。</p><pre class="line-numbers language-none"><code class="language-none">NProgress.inc();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="如果要添加特定值，可以将其作为参数传递："><a href="#如果要添加特定值，可以将其作为参数传递：" class="headerlink" title="如果要添加特定值，可以将其作为参数传递："></a>如果要添加特定值，可以将其作为参数传递：</h5><pre class="line-numbers language-none"><code class="language-none">NProgress.inc(0.2);  //这将获取当前状态值并添加0.2直到状态为0.994<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PS:我的理解：及每次增加一点点，但永远不会到100%</p><h4 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h4><h5 id="easing-和-speed"><a href="#easing-和-speed" class="headerlink" title="easing 和 speed"></a>easing 和 speed</h5><p>使用缓动（CSS缓动字符串）和速度（以豪秒为单位）调整动画设置。（默认： ease和 200）</p><pre class="line-numbers language-none"><code class="language-none">NProgress.configure({ easing:'ease',speed: 500});<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="showSpinner"><a href="#showSpinner" class="headerlink" title="showSpinner"></a>showSpinner</h5><p>通过将加载微调器设置为false 来关闭它。（默认值：true）</p><pre class="line-numbers language-none"><code class="language-none">Nprogress.configure({showSpinner:false})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="minimum"><a href="#minimum" class="headerlink" title="minimum"></a>minimum</h5><p>更改启动时使用最小的百分比（默认：0.08）</p><pre class="line-numbers language-none"><code class="language-none">NProgress.configure({minimum:0.1});<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="template"><a href="#template" class="headerlink" title="template:"></a>template:</h5><p>可以使用template 更改标记，若要使进度条保持工作，请将元素role=’bar’保留在那里，<a href="https://github.com/rstacruz/nprogress/blob/master/nprogress.js">默认模板</a>以进行参考</p><pre class="line-numbers language-none"><code class="language-none">NProgress.configure({template:"&lt;div class="..."&gt;...&lt;/div&gt;"})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="trickle"><a href="#trickle" class="headerlink" title="trickle"></a>trickle</h5><p>将其设置为false 关闭自动递增行为（默认：true）</p><pre class="line-numbers language-none"><code class="language-none">NProgress.configure({trickle:false})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h5><p>指定此选项以更改父容器（默认：body）</p><pre class="line-numbers language-none"><code class="language-none">NProgress.configure({parent:'#container'})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="在vue项目中使用"><a href="#在vue项目中使用" class="headerlink" title="在vue项目中使用"></a>在vue项目中使用</h4><h4 id="引入NProgress默认样式"><a href="#引入NProgress默认样式" class="headerlink" title="引入NProgress默认样式"></a>引入NProgress默认样式</h4><p>在 ~/main.js中引入Nprogress默认样式</p><pre class="line-numbers language-none"><code class="language-none">//引入进度条样式import 'nprogress/nprogress.css'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>它默认显示蓝色进度条，如果你想自定义进度条颜色可在全局css中或在app.vue下写入自己自定义的css样式；</p><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;//自定义进度条颜色#nprogress .bar{background: #F811B2 !important;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在页面切换中使用"><a href="#在页面切换中使用" class="headerlink" title="在页面切换中使用"></a>在页面切换中使用</h5><p>在 ~/router/index.js 【路由配置】文件中：</p><pre class="line-numbers language-none"><code class="language-none">import Vue from 'vue'import VueRouter from 'vue-router'//引入nprogress进度条插件import NProgress from 'nprogress'Vue.use(VueRouter);//简单配置进度条，可以不配置： 在axios中我们不再做配置，以用来区分。NProgess.inc(0.2)NProgress.configure({easing:'ease',speed:500,showSpinner:false})esport const constRouter=[{        path: '/login',        component: () =&gt; import('@/views/login/Login'),    },    ...]const rputer = new VueRouter({mode: 'history',base: process.env.BASE_URL,routes: constRouter})//页面路由刚开始切换的时候router.beforeEach(async (to,from,next)=&gt;{// 开启进度条    NProgress.start();})//页面路由切换完毕的时候router.afterEach(()=&gt;{//关闭进度条NProgress.done()})export default router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在接口请求中使用"><a href="#在接口请求中使用" class="headerlink" title="在接口请求中使用"></a>在接口请求中使用</h4><p>在 ~/api/index.js 【axios请求配置】文件中：</p><pre class="line-numbers language-none"><code class="language-none">import axios from 'axios'//引入nprogress进度条插件import NProgress from 'nprogress'//创建axios实例const service = axios.create({    baseURL: process.env.VUE_APP_BASE_API, //URL地址   环境变量文件    timeout: 5000 ,//超时})// 请求拦截器service.interceptors.request.use(    config =&gt; {    // 开启进度条NProgress.start();        return config    },    error =&gt; {        return Promise.reject(error)    })// 响应拦截器service.interceptors.response.use(    response =&gt;{        // 关闭进度条        NProgress.done()    return Promise.reject(response)    },    error =&gt; {        // 关闭进度条        NProgress.done()        return Promise.reject(error)    })export default service;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端开源插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>img</title>
      <link href="/2022/12/15/img/"/>
      <url>/2022/12/15/img/</url>
      
        <content type="html"><![CDATA[<h1 id="梦游天姥吟留别"><a href="#梦游天姥吟留别" class="headerlink" title="梦游天姥吟留别"></a>梦游天姥吟留别</h1><h2 id="唐-李白"><a href="#唐-李白" class="headerlink" title="[唐]李白"></a>[唐]李白</h2><p><img src="https://stayawake.oss-cn-beijing.aliyuncs.com/view.jpg"></p><p>海客谈瀛洲，烟涛微茫信难求；<br>越人语天姥，云霞明灭或可睹。<br>天姥连天向天横，势拔五岳掩赤城。<br>天台四万八千丈，对此欲倒东南倾。<br>我欲因之梦吴越，一夜飞度镜湖月。<br>湖月照我影，送我至剡溪。<br>谢公宿处今尚在，渌水荡漾清猿啼。<br>脚著谢公屐，身登青云梯。<br>半壁见海日，空中闻天鸡。<br>千岩万转路不定，迷花倚石忽已暝。<br>熊咆龙吟殷岩泉，栗深林兮惊层巅。<br>云青青兮欲雨，水澹澹兮生烟。<br>列缺霹雳，丘峦崩摧。<br>洞天石扉，訇然中开。<br>青冥浩荡不见底，日月照耀金银台。<br>霓为衣兮风为马，云之君兮纷纷而来下。<br>虎鼓瑟兮鸾回车，仙之人兮列如麻。<br>忽魂悸以魄动，恍惊起而长嗟。<br>惟觉时之枕席，失向来之烟霞。<br>世间行乐亦如此，古来万事东流水。<br>别君去兮何时还？且放白鹿青崖间。须行即骑访名山。<br>安能摧眉折腰事权贵，使我不得开心颜！</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FirstBlog</title>
      <link href="/2022/12/15/firstblog/"/>
      <url>/2022/12/15/firstblog/</url>
      
        <content type="html"><![CDATA[<h1 id="梦游天姥吟留别"><a href="#梦游天姥吟留别" class="headerlink" title="梦游天姥吟留别"></a>梦游天姥吟留别</h1><h2 id="唐-李白"><a href="#唐-李白" class="headerlink" title="[唐]李白"></a>[唐]李白</h2><p>海客谈瀛洲，烟涛微茫信难求；<br>越人语天姥，云霞明灭或可睹。<br>天姥连天向天横，势拔五岳掩赤城。<br>天台四万八千丈，对此欲倒东南倾。<br>我欲因之梦吴越，一夜飞度镜湖月。<br>湖月照我影，送我至剡溪。<br>谢公宿处今尚在，渌水荡漾清猿啼。<br>脚著谢公屐，身登青云梯。<br>半壁见海日，空中闻天鸡。<br>千岩万转路不定，迷花倚石忽已暝。<br>熊咆龙吟殷岩泉，栗深林兮惊层巅。<br>云青青兮欲雨，水澹澹兮生烟。<br>列缺霹雳，丘峦崩摧。<br>洞天石扉，訇然中开。<br>青冥浩荡不见底，日月照耀金银台。<br>霓为衣兮风为马，云之君兮纷纷而来下。<br>虎鼓瑟兮鸾回车，仙之人兮列如麻。<br>忽魂悸以魄动，恍惊起而长嗟。<br>惟觉时之枕席，失向来之烟霞。<br>世间行乐亦如此，古来万事东流水。<br>别君去兮何时还？且放白鹿青崖间。须行即骑访名山。<br>安能摧眉折腰事权贵，使我不得开心颜！</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/13/hello-world/"/>
      <url>/2022/12/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 开篇 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
